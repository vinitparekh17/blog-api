// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: internal/pb/blogservice/blog.proto

package blogservice

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BlogServiceClient is the client API for BlogService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BlogServiceClient interface {
	ListBlog(ctx context.Context, in *Void, opts ...grpc.CallOption) (*ListBlogResponse, error)
	CreateBlog(ctx context.Context, in *BlogPayload, opts ...grpc.CallOption) (*BlogId, error)
	GetBlog(ctx context.Context, in *BlogId, opts ...grpc.CallOption) (*BlogPayload, error)
	UpdateBlog(ctx context.Context, in *BlogPayload, opts ...grpc.CallOption) (*BlogPayload, error)
	DeleteBlog(ctx context.Context, in *BlogId, opts ...grpc.CallOption) (*BlogId, error)
	CreateBlogTag(ctx context.Context, in *BlogTag, opts ...grpc.CallOption) (*BlogTag, error)
	ListBlogTag(ctx context.Context, in *Void, opts ...grpc.CallOption) (*ListBlogTagResponse, error)
	GetBlogTag(ctx context.Context, in *BlogTagId, opts ...grpc.CallOption) (*BlogTag, error)
	UpdateBlogTag(ctx context.Context, in *BlogTag, opts ...grpc.CallOption) (*BlogTag, error)
	DeleteBlogTag(ctx context.Context, in *BlogTagId, opts ...grpc.CallOption) (*BlogTagId, error)
}

type blogServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBlogServiceClient(cc grpc.ClientConnInterface) BlogServiceClient {
	return &blogServiceClient{cc}
}

func (c *blogServiceClient) ListBlog(ctx context.Context, in *Void, opts ...grpc.CallOption) (*ListBlogResponse, error) {
	out := new(ListBlogResponse)
	err := c.cc.Invoke(ctx, "/blogservice.BlogService/ListBlog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogServiceClient) CreateBlog(ctx context.Context, in *BlogPayload, opts ...grpc.CallOption) (*BlogId, error) {
	out := new(BlogId)
	err := c.cc.Invoke(ctx, "/blogservice.BlogService/CreateBlog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogServiceClient) GetBlog(ctx context.Context, in *BlogId, opts ...grpc.CallOption) (*BlogPayload, error) {
	out := new(BlogPayload)
	err := c.cc.Invoke(ctx, "/blogservice.BlogService/GetBlog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogServiceClient) UpdateBlog(ctx context.Context, in *BlogPayload, opts ...grpc.CallOption) (*BlogPayload, error) {
	out := new(BlogPayload)
	err := c.cc.Invoke(ctx, "/blogservice.BlogService/UpdateBlog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogServiceClient) DeleteBlog(ctx context.Context, in *BlogId, opts ...grpc.CallOption) (*BlogId, error) {
	out := new(BlogId)
	err := c.cc.Invoke(ctx, "/blogservice.BlogService/DeleteBlog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogServiceClient) CreateBlogTag(ctx context.Context, in *BlogTag, opts ...grpc.CallOption) (*BlogTag, error) {
	out := new(BlogTag)
	err := c.cc.Invoke(ctx, "/blogservice.BlogService/CreateBlogTag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogServiceClient) ListBlogTag(ctx context.Context, in *Void, opts ...grpc.CallOption) (*ListBlogTagResponse, error) {
	out := new(ListBlogTagResponse)
	err := c.cc.Invoke(ctx, "/blogservice.BlogService/ListBlogTag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogServiceClient) GetBlogTag(ctx context.Context, in *BlogTagId, opts ...grpc.CallOption) (*BlogTag, error) {
	out := new(BlogTag)
	err := c.cc.Invoke(ctx, "/blogservice.BlogService/GetBlogTag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogServiceClient) UpdateBlogTag(ctx context.Context, in *BlogTag, opts ...grpc.CallOption) (*BlogTag, error) {
	out := new(BlogTag)
	err := c.cc.Invoke(ctx, "/blogservice.BlogService/UpdateBlogTag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogServiceClient) DeleteBlogTag(ctx context.Context, in *BlogTagId, opts ...grpc.CallOption) (*BlogTagId, error) {
	out := new(BlogTagId)
	err := c.cc.Invoke(ctx, "/blogservice.BlogService/DeleteBlogTag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BlogServiceServer is the server API for BlogService service.
// All implementations must embed UnimplementedBlogServiceServer
// for forward compatibility
type BlogServiceServer interface {
	ListBlog(context.Context, *Void) (*ListBlogResponse, error)
	CreateBlog(context.Context, *BlogPayload) (*BlogId, error)
	GetBlog(context.Context, *BlogId) (*BlogPayload, error)
	UpdateBlog(context.Context, *BlogPayload) (*BlogPayload, error)
	DeleteBlog(context.Context, *BlogId) (*BlogId, error)
	CreateBlogTag(context.Context, *BlogTag) (*BlogTag, error)
	ListBlogTag(context.Context, *Void) (*ListBlogTagResponse, error)
	GetBlogTag(context.Context, *BlogTagId) (*BlogTag, error)
	UpdateBlogTag(context.Context, *BlogTag) (*BlogTag, error)
	DeleteBlogTag(context.Context, *BlogTagId) (*BlogTagId, error)
	mustEmbedUnimplementedBlogServiceServer()
}

// UnimplementedBlogServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBlogServiceServer struct {
}

func (UnimplementedBlogServiceServer) ListBlog(context.Context, *Void) (*ListBlogResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBlog not implemented")
}
func (UnimplementedBlogServiceServer) CreateBlog(context.Context, *BlogPayload) (*BlogId, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBlog not implemented")
}
func (UnimplementedBlogServiceServer) GetBlog(context.Context, *BlogId) (*BlogPayload, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlog not implemented")
}
func (UnimplementedBlogServiceServer) UpdateBlog(context.Context, *BlogPayload) (*BlogPayload, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBlog not implemented")
}
func (UnimplementedBlogServiceServer) DeleteBlog(context.Context, *BlogId) (*BlogId, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBlog not implemented")
}
func (UnimplementedBlogServiceServer) CreateBlogTag(context.Context, *BlogTag) (*BlogTag, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBlogTag not implemented")
}
func (UnimplementedBlogServiceServer) ListBlogTag(context.Context, *Void) (*ListBlogTagResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBlogTag not implemented")
}
func (UnimplementedBlogServiceServer) GetBlogTag(context.Context, *BlogTagId) (*BlogTag, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlogTag not implemented")
}
func (UnimplementedBlogServiceServer) UpdateBlogTag(context.Context, *BlogTag) (*BlogTag, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBlogTag not implemented")
}
func (UnimplementedBlogServiceServer) DeleteBlogTag(context.Context, *BlogTagId) (*BlogTagId, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBlogTag not implemented")
}
func (UnimplementedBlogServiceServer) mustEmbedUnimplementedBlogServiceServer() {}

// UnsafeBlogServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BlogServiceServer will
// result in compilation errors.
type UnsafeBlogServiceServer interface {
	mustEmbedUnimplementedBlogServiceServer()
}

func RegisterBlogServiceServer(s grpc.ServiceRegistrar, srv BlogServiceServer) {
	s.RegisterService(&BlogService_ServiceDesc, srv)
}

func _BlogService_ListBlog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlogServiceServer).ListBlog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blogservice.BlogService/ListBlog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlogServiceServer).ListBlog(ctx, req.(*Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlogService_CreateBlog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlogPayload)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlogServiceServer).CreateBlog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blogservice.BlogService/CreateBlog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlogServiceServer).CreateBlog(ctx, req.(*BlogPayload))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlogService_GetBlog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlogId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlogServiceServer).GetBlog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blogservice.BlogService/GetBlog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlogServiceServer).GetBlog(ctx, req.(*BlogId))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlogService_UpdateBlog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlogPayload)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlogServiceServer).UpdateBlog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blogservice.BlogService/UpdateBlog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlogServiceServer).UpdateBlog(ctx, req.(*BlogPayload))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlogService_DeleteBlog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlogId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlogServiceServer).DeleteBlog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blogservice.BlogService/DeleteBlog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlogServiceServer).DeleteBlog(ctx, req.(*BlogId))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlogService_CreateBlogTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlogTag)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlogServiceServer).CreateBlogTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blogservice.BlogService/CreateBlogTag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlogServiceServer).CreateBlogTag(ctx, req.(*BlogTag))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlogService_ListBlogTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlogServiceServer).ListBlogTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blogservice.BlogService/ListBlogTag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlogServiceServer).ListBlogTag(ctx, req.(*Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlogService_GetBlogTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlogTagId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlogServiceServer).GetBlogTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blogservice.BlogService/GetBlogTag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlogServiceServer).GetBlogTag(ctx, req.(*BlogTagId))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlogService_UpdateBlogTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlogTag)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlogServiceServer).UpdateBlogTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blogservice.BlogService/UpdateBlogTag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlogServiceServer).UpdateBlogTag(ctx, req.(*BlogTag))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlogService_DeleteBlogTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlogTagId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlogServiceServer).DeleteBlogTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blogservice.BlogService/DeleteBlogTag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlogServiceServer).DeleteBlogTag(ctx, req.(*BlogTagId))
	}
	return interceptor(ctx, in, info, handler)
}

// BlogService_ServiceDesc is the grpc.ServiceDesc for BlogService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BlogService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "blogservice.BlogService",
	HandlerType: (*BlogServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListBlog",
			Handler:    _BlogService_ListBlog_Handler,
		},
		{
			MethodName: "CreateBlog",
			Handler:    _BlogService_CreateBlog_Handler,
		},
		{
			MethodName: "GetBlog",
			Handler:    _BlogService_GetBlog_Handler,
		},
		{
			MethodName: "UpdateBlog",
			Handler:    _BlogService_UpdateBlog_Handler,
		},
		{
			MethodName: "DeleteBlog",
			Handler:    _BlogService_DeleteBlog_Handler,
		},
		{
			MethodName: "CreateBlogTag",
			Handler:    _BlogService_CreateBlogTag_Handler,
		},
		{
			MethodName: "ListBlogTag",
			Handler:    _BlogService_ListBlogTag_Handler,
		},
		{
			MethodName: "GetBlogTag",
			Handler:    _BlogService_GetBlogTag_Handler,
		},
		{
			MethodName: "UpdateBlogTag",
			Handler:    _BlogService_UpdateBlogTag_Handler,
		},
		{
			MethodName: "DeleteBlogTag",
			Handler:    _BlogService_DeleteBlogTag_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal/pb/blogservice/blog.proto",
}
